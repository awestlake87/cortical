var searchIndex = {};
searchIndex["organelle"] = {"doc":"Organelle - reactive architecture for emergent AI systems","items":[[3,"Axon","organelle","wrap a soma with a set of requirements that will be validated upon startup",null,null],[3,"Organelle","","a soma designed to facilitate connections between other somas",null,null],[3,"Error","","The Error type.",null,null],[12,"0","","The kind of the error.",0,null],[4,"Constraint","","constraints that can be put on axons for validation purposes",null,null],[13,"One","","only accept one synapse",1,null],[13,"Variadic","","accept any number of synapses",1,null],[4,"Impulse","","a group of control signals passed between somas",null,null],[13,"AddDendrite","","add a dendrite for input to the soma",2,null],[13,"AddTerminal","","add a terminal for output to the soma",2,null],[13,"Start","","notify the soma that it has received all of its inputs and outputs",2,null],[13,"Stop","","stop the event loop and exit gracefully",2,null],[13,"Error","","terminate the event loop with an error",2,null],[13,"Probe","","send a probe throughout the organelle",2,null],[4,"ErrorKind","","The kind of an error.",null,null],[13,"Msg","","A convenient variant for String.",3,null],[13,"Io","","glue for io::Error",3,null],[13,"FromUtf8","","glue for std::string::FromUtf8Error",3,null],[13,"Canceled","","glue for futures::Canceled",3,null],[13,"SerdeJson","","glue for serde_json::Error",3,null],[13,"SomaError","","a soma returned an error when called into",3,null],[13,"InvalidSynapse","","axon failed to validate a synapse",3,null],[13,"MissingSynapse","","axon is missing a synapse",3,null],[11,"new","","wrap a soma with constraints specified by dendrite and terminal constraints",4,{"inputs":[{"name":"t"},{"generics":["constraint"],"name":"vec"},{"generics":["constraint"],"name":"vec"}],"output":{"name":"self"}}],[11,"probe","","",4,{"inputs":[{"name":"self"},{"name":"settings"}],"output":{"generics":["future"],"name":"box"}}],[11,"update","","",4,{"inputs":[{"name":"self"},{"name":"impulse"}],"output":{"generics":["future"],"name":"box"}}],[11,"new","","create a new organelle",5,{"inputs":[{"name":"t"},{"name":"handle"}],"output":{"name":"self"}}],[11,"nucleus","","get the main soma's uuid",5,{"inputs":[{"name":"self"}],"output":{"name":"uuid"}}],[11,"add_soma","","add a soma to the organelle",5,{"inputs":[{"name":"self"},{"name":"u"}],"output":{"name":"uuid"}}],[11,"connect","","connect two somas together using the specified synapse",5,null],[11,"add_dendrite","","send a dendrite to the specified soma",5,null],[11,"add_terminal","","send a terminal to the specified soma",5,null],[11,"probe","","",5,{"inputs":[{"name":"self"},{"name":"settings"}],"output":{"generics":["future"],"name":"box"}}],[11,"update","","",5,{"inputs":[{"name":"self"},{"name":"impulse"}],"output":{"generics":["future"],"name":"box"}}],[11,"run","","convert this soma into a future that can be passed to an event loop",5,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"convert_from","","convert from another type of impulse",2,{"inputs":[{"name":"impulse"}],"output":{"name":"self"}}],[0,"probe","","probe soma used to inspect the internal structure of an organelle",null,null],[3,"SynapseData","organelle::probe","data associated with a synapse between two somas",null,null],[12,"0","","",6,null],[3,"Soma","","soma that probes the internal structure of an organelle",null,null],[3,"Settings","","settings for a probe operation",null,null],[3,"Terminal","","sender for a probe operation",null,null],[3,"Dendrite","","receive for a probe operation",null,null],[4,"ConstraintData","","data associated with a synapse constraint",null,null],[13,"One","","only one synapse of the given variant",7,null],[12,"variant","organelle::probe::ConstraintData","the enum variant for the synapse",7,null],[12,"soma","","the other soma involved in the synapse",7,null],[13,"Variadic","organelle::probe","any number of synapses of the given variant",7,null],[12,"variant","organelle::probe::ConstraintData","the enum variant for the synapse",7,null],[12,"somas","","the other somas involved in the synapses",7,null],[4,"SomaData","organelle::probe","data associated with a soma, organelle, or axon",null,null],[13,"Organelle","","data associated with an organelle",8,null],[12,"nucleus","organelle::probe::SomaData","the soma at the center of an organelle",8,null],[12,"somas","","the rest of the somas contained in the organelle",8,null],[12,"uuid","","unique id of the organelle",8,null],[12,"name","","name of the organelle",8,null],[13,"Axon","organelle::probe","data associated with the axon of a soma",8,null],[12,"terminals","organelle::probe::SomaData","data associated with the terminals for this soma",8,null],[12,"dendrites","","data associated with the dendrites for this soma",8,null],[12,"uuid","","unique id of the axon",8,null],[12,"name","","name of the axon",8,null],[13,"Soma","organelle::probe","data associated with a custom soma",8,null],[12,"synapse","organelle::probe::SomaData","the type of synapse used by this soma",8,null],[12,"name","","the name of the soma",8,null],[4,"Synapse","organelle::probe","the synapse for a probe",null,null],[13,"Probe","","a synapse used to perform probes",9,null],[5,"synapse","","create a junction between two probe-ready somas",null,null],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"synapsedata"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"synapsedata"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"synapsedata"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"constraintdata"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"constraintdata"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"constraintdata"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"somadata"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"somadata"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"somadata"}],"output":{"name":"bool"}}],[11,"axon","","create a new probe soma",10,{"inputs":[],"output":{"name":"axon"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"synapse"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"synapse"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"settings"}}],[11,"new","","create settings",11,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"terminal"}}],[11,"probe","","perform the probe",12,null],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"synapse","","",9,null],[11,"update","","",10,{"inputs":[{"name":"self"},{"name":"impulse"}],"output":{"generics":["future"],"name":"box"}}],[6,"Result","organelle","Convenient wrapper around `std::Result`.",null,null],[8,"Soma","","a singular cell of functionality that can be ported between organelles",null,null],[16,"Synapse","","the synapse a synapse plays in a connection between somas.",14,null],[16,"Error","","the types of errors that this soma can return",14,null],[11,"probe","","probe the internal structure of this soma",14,{"inputs":[{"name":"self"},{"name":"settings"}],"output":{"generics":["future"],"name":"box"}}],[10,"update","","react to a single impulse",14,{"inputs":[{"name":"self"},{"name":"impulse"}],"output":{"generics":["future"],"name":"box"}}],[11,"run","","convert this soma into a future that can be passed to an event loop",14,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}],[8,"Synapse","","trait alias to express requirements of a Synapse type",null,null],[16,"Terminal","","terminals are the senders or outputs in a connection between somas",15,null],[16,"Dendrite","","dendrites are the receivers or inputs in a connection between somas",15,null],[11,"data","","get the data associated with the synapse",15,{"inputs":[],"output":{"name":"synapsedata"}}],[10,"synapse","","form a synapse for this synapse into a terminal and dendrite",15,null],[8,"ResultExt","","Additional methods for `Result`, for easy interaction with this crate.",null,null],[10,"chain_err","","If the `Result` is an `Err` then `chain_err` evaluates the closure, which returns some type that can be converted to `ErrorKind`, boxes the original error to store as the cause, then returns a new error containing the original error.",16,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",0,{"inputs":[{"name":"errorkind"},{"name":"state"}],"output":{"name":"error"}}],[11,"from_kind","","",0,null],[11,"with_chain","","",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"self"}}],[11,"kind","","",0,null],[11,"iter","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"chain_err","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"backtrace","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"extract_backtrace","","",0,{"inputs":[{"name":"error"}],"output":{"generics":["arc"],"name":"option"}}],[11,"from_kind","","Constructs an error from a kind, and generates a backtrace.",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"with_chain","","Constructs a chained error from another error and a kind, and generates a backtrace.",0,{"inputs":[{"name":"e"},{"name":"k"}],"output":{"name":"error"}}],[11,"with_boxed_chain","","Construct a chained error from another boxed error and a kind, and generates a backtrace",0,{"inputs":[{"generics":["error"],"name":"box"},{"name":"k"}],"output":{"name":"error"}}],[11,"kind","","Returns the kind of the error.",0,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"iter","","Iterates over the error chain.",0,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"backtrace","","Returns the backtrace associated with this error.",0,{"inputs":[{"name":"self"}],"output":{"generics":["backtrace"],"name":"option"}}],[11,"chain_err","","Extends the error chain with a new entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"error"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"canceled"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"deref","","",0,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","A string describing the error kind.",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"data","","get the data associated with the synapse",15,{"inputs":[],"output":{"name":"synapsedata"}}],[11,"probe","","probe the internal structure of this soma",14,{"inputs":[{"name":"self"},{"name":"settings"}],"output":{"generics":["future"],"name":"box"}}],[11,"run","","convert this soma into a future that can be passed to an event loop",14,{"inputs":[{"name":"self"},{"name":"handle"}],"output":{"generics":["future"],"name":"box"}}]],"paths":[[3,"Error"],[4,"Constraint"],[4,"Impulse"],[4,"ErrorKind"],[3,"Axon"],[3,"Organelle"],[3,"SynapseData"],[4,"ConstraintData"],[4,"SomaData"],[4,"Synapse"],[3,"Soma"],[3,"Settings"],[3,"Terminal"],[3,"Dendrite"],[8,"Soma"],[8,"Synapse"],[8,"ResultExt"]]};
initSearch(searchIndex);
